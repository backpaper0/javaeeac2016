ext {
    javaeeVersion = '7.0'
    jerseyVersion = '2.22.2'
    payaraVersion = '4.1.1.164'
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    providedCompile "javax:javaee-api:${javaeeVersion}"
    compile "org.glassfish.jersey.security:oauth2-client:${jerseyVersion}"
    archives "fish.payara.extras:payara-micro:${payaraVersion}"
}

task run(type:Exec) {
    def payaraJar = findPayaraJar()
    def warFile = war.archivePath
    commandLine 'java', '-jar', "${payaraJar}", '--noCluster', '--deploy', "${warFile}"
}

run.dependsOn war

task runDebug(type:Exec) {
    def payaraJar = findPayaraJar()
    def warFile = war.archivePath
    commandLine 'java', '-Xrunjdwp:transport=dt_socket,server=y,address=8000', '-jar', "${payaraJar}", '--noCluster', '--deploy', "${warFile}"
}

runDebug.dependsOn war

task uberJar(type: Exec) {
    def payaraJar = findPayaraJar()
    def warFile = war.archivePath
    commandLine 'java', '-jar', "${payaraJar}", '--deploy', "${warFile}", '--outputUberJar', "${war.destinationDir}/${war.baseName}.jar"
}

uberJar.dependsOn war

def findPayaraJar() {
    configurations.archives.find { it.name == "payara-micro-${payaraVersion}.jar" }
}
